/*
 * Testerra
 *
 * (C) 2013, Stefan Prasse, T-Systems Multimedia Solutions GmbH, Deutsche Telekom AG
 *
 * Deutsche Telekom AG and all other contributors /
 * copyright owners license this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
package eu.tsystems.mms.tic.testframework.qcrest.test.client;

import eu.tsystems.mms.tic.testframework.qcrest.clients.QcRestClient;
import eu.tsystems.mms.tic.testframework.qcrest.clients.RestConnector;
import eu.tsystems.mms.tic.testframework.qcrest.wrapper.TestPlanFolder;
import eu.tsystems.mms.tic.testframework.qcrest.wrapper.TestPlanTest;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Tests for QC Test Plan.
 *
 * @author sepr
 */
public class PlanTest extends AbstractTest {

    /**
     * Path to test in testlab.
     */
//    private static final String TEST_PATH = "Subject\\Xeta\\QCWebServiceClient";
    private static final String TEST_PATH = "Subject\\Testerra\\QCRestClient";
    /**
     * Trash Folder.
     */
    private static final String TRASH = "TrashCan";
    /**
     * Name of tests in testlab
     */
    private static final String TEST = "testUnderTest";

    /**
     * Test method: change the properties of an existing Test in QC TestPlan.
     *
     * @throws IOException .
     */
    @Test
    public void testEditTest() throws Exception {

        log().info("Test editTest");
        final TestPlanTest test = QcRestClient.getTestPlanTest(TEST, TEST_PATH);
        log().debug("Test description before: " + test.getDescription());

        // To edit a test, create an empty entity and set its id and the changed values.
        // Real objects from the service contain too much information.
        final TestPlanTest changer = new TestPlanTest();
        final Long timestamp = System.currentTimeMillis();
        changer.setDescription(timestamp + "");
        log().debug("Set Test description to: " + changer.getDescription());
        QcRestClient.editTest(changer, test.getId());

        log().debug("Getting updated test.");
        final TestPlanTest validate = QcRestClient.getTestPlanTest(TEST, TEST_PATH);
        log().debug("Updated Test description: " + validate.getDescription());
        Assert.assertTrue(validate.getDescription().contains(timestamp + ""), "Test doesn't seem to be changed");
    }

    /**
     * Test method: gets a test under a specified path.
     *
     * @throws IOException RestException
     */
    @Test(enabled = true)
    public void testGetTest() throws Exception {
        log().info("Get test from Plan");
        final TestPlanTest test = QcRestClient.getTestPlanTest(TEST, TEST_PATH);
        log().debug("Test name       : " + test.getName());
        log().debug("Test description: " + test.getDescription());
        log().debug("Test path       : " + test.getPath());
        log().debug("Test id         : " + test.getId());
        log().debug("Test type       : " + test.getType());

        Assert.assertEquals(TEST, test.getName());
    }

    /**
     * Test method: change the properties of an existing Test in QC TestPlan.
     *
     * @throws IOException .
     */
    @Test
    public void testAddTest() throws Exception {
        TestPlanFolder parent = null;
        int idReturned = 0;
        try {
            testCreateTestPlanFolder();
            log().info("Test addTest");
            final String time = System.currentTimeMillis() + "";
            parent = QcRestClient.getTestPlanFolder(TEST_PATH + "\\" + TRASH);
            final TestPlanTest test = new TestPlanTest();
            test.setDescription("Test generated by QcRestClient for test purposes. Remove if you want to.");
            test.setName(time);
            test.setParentId(parent.getId());
            test.setType("MANUAL");
            idReturned = QcRestClient.addTest(test);
            Assert.assertNotEquals(idReturned, 0, "Returned id is 0, so something went wrong.");

            log().debug("Getting created test.");
            final TestPlanTest validate = QcRestClient.getTestPlanTestById(idReturned);
            log().debug("Added Test: " + validate.toString());
        } finally {
            // delete
            if (idReturned != 0) {
                log().debug("Remove created test");
                Map<String, String> requestHeaders = new HashMap<String, String>();
                requestHeaders.put("Accept", "application/xml");
                RestConnector.getInstance().httpDelete(
                                RestConnector.getInstance().buildEntityCollectionUrl("test") + "/" + idReturned)
                        .toString();
            }
            parent = QcRestClient.getTestPlanFolder(TEST_PATH + "\\" + TRASH);
            if (parent != null) {
                log().debug("Remove created Folder");
                Map<String, String> requestHeaders = new HashMap<String, String>();
                requestHeaders.put("Accept", "application/xml");
                RestConnector.getInstance().httpDelete(
                                RestConnector.getInstance().buildEntityCollectionUrl("test-folder") + "/" + parent.getId())
                        .toString();
            }
        }
    }

    /**
     * Create Trash Folder for addTest Tests.
     *
     * @throws IOException .
     */
    private void testCreateTestPlanFolder() throws Exception {
        log().info("Test createTestPlanFolder");
        final TestPlanFolder parent = QcRestClient.getTestPlanFolder(TEST_PATH);
        final TestPlanFolder toCreate = new TestPlanFolder();
        toCreate.setName(TRASH);
        toCreate.setParentId(parent.getId());

        int idReturned = QcRestClient.createTestFolder(toCreate);
        Assert.assertNotEquals(idReturned, 0, "Returned id is 0, so something went wrong.");

        log().debug("Getting created Folder.");
        final TestPlanFolder validate = QcRestClient.getTestPlanFolderById(idReturned);
        log().debug("Added Test-Folder: " + validate.toString());
    }
}
